{"version":3,"sources":["index.js"],"names":["base_url_iex","Stock","props","_this","Object","D_Documents_5IF_WebstormProjects_spms_gay_thomas_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","D_Documents_5IF_WebstormProjects_spms_gay_thomas_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","D_Documents_5IF_WebstormProjects_spms_gay_thomas_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","update_unit_price","price_url","symbol","fetch","then","resp","json","data","u_price","parseFloat","toFixed","setState","unit_price","bind","D_Documents_5IF_WebstormProjects_spms_gay_thomas_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","state","showEUR","_this2","interval","setInterval","clearInterval","prevProps","showinEur","_this3","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","usdEurexchange","shares","type","className","onClick","deleteStock","index","React","Component","Portfolio","_this4","remove_stock","tmp_stocks","stocks","stock_price","splice","nb_tmp","current_stocks","tmp_total","total_value","remove_all_stock","show_in_eur","inEUR","show_in_usd","each_stock","stock","i","key","usdEur","addingStock","loaded","localStorage","setItem","name","JSON","stringify","parse","getItem","_this5","window","addEventListener","savePortfolioState","taux","catch","error","alert","update_total","removeEventListener","_this6","_loop","s","_this7","find","refs","value","stocks_sym","stock_shares","parseInt","number_shares","tmp_current_stocks","push","_this8","htmlFor","id","ref","role","save_stock","back_to_portfolio","_this9","print_total","data-toggle","scope","map","aria-label","add_stock_state","remove","render_stock_form","render_portfolio","Main","_this10","addPortfolio","current_number_of_portfolio","portfolios","includes","document","getElementById","newPF","tmp_pf","removePortfolio","removeItem","eachPortfolios","pf","saveMainState","_this11","ReactDOM","render"],"mappings":"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","file":"static/js/main.5c6975c0.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\n\r\nconst base_url_iex = \"https://api.iextrading.com/1.0\";\r\nconst API_KEY = \"YIY9YZU6E4JU7NUM\";\r\nconst conversion_url = \"https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=USD&to_currency=EUR&apikey=\" + API_KEY;\r\n\r\n\r\nclass Stock extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            unit_price: 0,\r\n            showEUR: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // The stock price will be refresh every 5 sec\r\n        this.update_unit_price();\r\n        this.interval = setInterval(() => this.update_unit_price(), 5000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.showinEur !== prevProps.showinEur) {\r\n            this.setState({showEUR: this.props.showinEur});\r\n        }\r\n    }\r\n\r\n    update_unit_price = () => {\r\n        let price_url = base_url_iex + '/stock/' + this.props.symbol + '/price';\r\n        fetch(price_url)\r\n            .then((resp) => resp.json())\r\n            .then(function (data) {\r\n                const u_price = parseFloat(data).toFixed(3);\r\n                this.setState({unit_price: u_price});\r\n            }.bind(this));\r\n    };\r\n\r\n    render() {\r\n        if (this.state.showEUR === true) {\r\n            return (\r\n                <tr>\r\n                    <td>{this.props.symbol}</td>\r\n                    <td>{parseFloat(this.state.unit_price * this.props.usdEurexchange).toFixed(3)} €</td>\r\n                    <td>{this.props.shares}</td>\r\n                    <td>{parseFloat(this.state.unit_price * this.props.shares * this.props.usdEurexchange).toFixed(3)} €</td>\r\n                    <td>\r\n                        <button type=\"button\" className=\"btn btn-warning btn-sm\"\r\n                                onClick={() => this.props.deleteStock(this.props.index)}>Delete\r\n                        </button>\r\n                    </td>\r\n                </tr>\r\n            );\r\n        } else {\r\n            return (\r\n                <tr>\r\n                    <td>{this.props.symbol}</td>\r\n                    <td>{this.state.unit_price} $</td>\r\n                    <td>{this.props.shares}</td>\r\n                    <td>{parseFloat(this.state.unit_price * this.props.shares).toFixed(3)} $</td>\r\n                    <td>\r\n                        <button type=\"button\" className=\"btn btn-warning btn-sm\"\r\n                                onClick={() => this.props.deleteStock(this.props.index)}>Delete\r\n                        </button>\r\n                    </td>\r\n                </tr>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nclass Portfolio extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            addingStock: false,\r\n            stocks: [],\r\n            current_stocks: 0,\r\n            total_value: 0,\r\n            loaded: 0,\r\n            inEUR: false,\r\n            usdEur: 0\r\n        };\r\n\r\n    }\r\n\r\n    savePortfolioState() {\r\n        localStorage.setItem(this.props.name, JSON.stringify(this.state));\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.setState(JSON.parse(localStorage.getItem(this.props.name)));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState(JSON.parse(localStorage.getItem(this.props.name)));\r\n\r\n        // add event listener to save state to localStorage\r\n        // when user leaves/refreshes the page\r\n        window.addEventListener(\r\n            \"beforeunload\",\r\n            this.savePortfolioState.bind(this)\r\n        );\r\n\r\n        fetch(conversion_url)\r\n            .then((resp) => resp.json())\r\n            .then(function (data) {\r\n                let taux = parseFloat(data[\"Realtime Currency Exchange Rate\"][\"5. Exchange Rate\"]).toFixed(3);\r\n                this.setState({usdEur: taux});\r\n            }.bind(this))\r\n            .catch(function (error) {\r\n                alert(\"Exchange not found\")\r\n            });\r\n\r\n        // The total value of a portfolios will be refresh every minute\r\n        this.update_total();\r\n        this.interval = setInterval(() => this.update_total(), 60000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\r\n            \"beforeunload\",\r\n            this.savePortfolioState.bind(this)\r\n        );\r\n\r\n        // saves if component has a chance to unmount\r\n        this.savePortfolioState();\r\n\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n\r\n    update_total() {\r\n        let tmp_total = 0;\r\n        if (this.state.current_stocks === 0) {\r\n            this.setState({total_value: 0});\r\n        } else {\r\n            for (let i = 0; i < this.state.current_stocks; i++) {\r\n                let s = this.state.stocks[i];\r\n                let price_url = base_url_iex + '/stock/' + s.symbol + '/price';\r\n                fetch(price_url)\r\n                    .then((resp) => resp.json())\r\n                    .then(function (data) {\r\n                        const u_price = parseFloat(data).toFixed(3);\r\n                        tmp_total += u_price * s.shares;\r\n                        this.setState({total_value: tmp_total});\r\n                    }.bind(this));\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    remove_stock = (index) => {\r\n        let tmp_stocks = this.state.stocks;\r\n        let stock_price = this.state.stocks[index].unit_price * this.state.stocks[index].shares;\r\n        tmp_stocks.splice(index, 1);\r\n        let nb_tmp = this.state.current_stocks - 1;\r\n        let tmp_total = this.state.total_value - stock_price;\r\n        tmp_total = parseFloat(tmp_total).toFixed(3);\r\n\r\n        this.setState({\r\n            stocks: tmp_stocks,\r\n            current_stocks: nb_tmp,\r\n            total_value: tmp_total\r\n        });\r\n    };\r\n\r\n    remove_all_stock = () => {\r\n        this.setState({\r\n            stocks: [],\r\n            current_stocks: 0,\r\n            total_value: 0\r\n        });\r\n    };\r\n\r\n    show_in_eur = () => {\r\n        this.setState({inEUR: true});\r\n    };\r\n\r\n    show_in_usd = () => {\r\n        this.setState({inEUR: false});\r\n    };\r\n\r\n    add_stock_state() {\r\n        this.setState({addingStock: true});\r\n    }\r\n\r\n    save_stock() {\r\n        //Here we check if the new stock already exist or\r\n        // if the number of different stocks in this portfolio is less than 50\r\n        if (this.state.current_stocks < 50 ||\r\n            typeof (this.state.stocks.find(s => s.symbol === this.refs.symbol.value)) !== 'undefined') {\r\n            let stocks_sym = this.refs.symbol.value;\r\n            let stock_shares = parseInt(this.refs.number_shares.value);\r\n            let tmp_total = this.state.total_value;\r\n            let tmp_current_stocks = this.state.current_stocks;\r\n            let tmp_stocks = this.state.stocks;\r\n\r\n            let price_url = base_url_iex + '/stock/' + stocks_sym + '/price';\r\n\r\n            fetch(price_url)\r\n                .then((resp) => resp.json())\r\n                .then(function (data) {\r\n                    //Check if the symbol exist in the portfolio and\r\n                    // if it is not the case, add 1 top the current number of stocks\r\n                    if (typeof (tmp_stocks.find(s => s.symbol === stocks_sym)) === 'undefined') {\r\n                        tmp_current_stocks = tmp_current_stocks + 1;\r\n                    }\r\n                    let u_price = parseFloat(data).toFixed(3);\r\n                    tmp_total += u_price * stock_shares;\r\n                    tmp_total = parseFloat(tmp_total).toFixed(3);\r\n                    tmp_stocks.push({symbol: stocks_sym, shares: stock_shares, unit_price: u_price});\r\n\r\n                    this.setState({\r\n                        addingStock: false,\r\n                        stocks: tmp_stocks,\r\n                        current_stocks: tmp_current_stocks,\r\n                        total_value: tmp_total\r\n                    });\r\n\r\n                }.bind(this))\r\n                .catch(function (error) {\r\n                    alert(\"Symbol not found\" + error)\r\n                });\r\n\r\n        } else {\r\n            alert(\"You have too much stocks in this portfolio\");\r\n        }\r\n    }\r\n\r\n    back_to_portfolio() {\r\n        this.setState({addingStock: false});\r\n    }\r\n\r\n    each_stock = (stock, i) => {\r\n        return (\r\n            <Stock symbol={stock.symbol} shares={stock.shares}\r\n                   key={i} index={i} showinEur={this.state.inEUR} usdEurexchange={this.state.usdEur}\r\n                   deleteStock={(i) => this.remove_stock(i)}\r\n            />)\r\n\r\n\r\n    };\r\n\r\n    render_stock_form() {\r\n        return (\r\n            <div className=\"mt-2 col-lg-6 col-sm-12 p-1\">\r\n                <div className=\"card \">\r\n\r\n                    <h3 className=\"card-header\">{this.props.name}</h3>\r\n\r\n                    <div className=\"form-group\">\r\n                        <div>\r\n                            <label htmlFor=\"symbol\">Symbol</label>\r\n                            <input type=\"text\" id=\"symbol\" ref=\"symbol\" className=\"form-control\"/>\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"number_shares\">Total number of shares</label>\r\n                            <input type=\"number\" id=\"number_shares\" ref=\"number_shares\" className=\"form-control\"/>\r\n                        </div>\r\n                        <div className=\"btn-toolbar m-2\" role=\"toolbar\">\r\n                            <div className=\"btn-group mr-3\" role=\"group\">\r\n                                <button type=\"button\" className=\"btn btn-success\"\r\n                                        onClick={() => this.save_stock()}>Save\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"btn-group\" role=\"group\">\r\n                                <button type=\"button\" className=\"btn btn-outline-secondary btn\"\r\n                                        onClick={() => this.back_to_portfolio()}>Cancel\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render_portfolio() {\r\n        let print_total = '';\r\n        if (this.state.inEUR === true) {\r\n            print_total = parseFloat(this.state.usdEur * this.state.total_value).toFixed(3) + '€'\r\n        } else {\r\n            print_total = parseFloat(this.state.total_value).toFixed(3) + '$'\r\n        }\r\n        return (\r\n            <div className=\"mt-2 col-lg-6 col-sm-12 p-1\">\r\n                <div className=\"card \">\r\n\r\n                    <h3 className=\"card-header\">{this.props.name}</h3>\r\n                    <div className=\"container\">\r\n                        <div className=\"btn-group btn-group-toggle m-1\" data-toggle=\"buttons\">\r\n                            <button className=\"btn btn-secondary float-right\" type=\"radio\"\r\n                                    onClick={() => this.show_in_usd()}> Show in $\r\n                            </button>\r\n                            <button className=\"btn btn-secondary float-right\" type=\"radio\"\r\n                                    onClick={() => this.show_in_eur()}> Show in €\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <table className=\"table table-striped table-hover\">\r\n                            <thead>\r\n                            <tr>\r\n                                <th scope=\"col\">Name</th>\r\n                                <th scope=\"col\">Unit. Value</th>\r\n                                <th scope=\"col\">Quantity</th>\r\n                                <th scope=\"col\">Total Value</th>\r\n                                <th scope=\"col\">Delete</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {this.state.stocks.map(this.each_stock)}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div>\r\n                        Total value : {print_total}\r\n                    </div>\r\n\r\n                    <div className=\"btn-toolbar m-2\" role=\"toolbar\">\r\n                        <div className=\"btn-group m-1\" role=\"group\" aria-label=\"First group\">\r\n                            <button type=\"button\" className=\"btn btn-primary\"\r\n                                    onClick={() => this.add_stock_state()}>Add\r\n                                Stock\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"btn-group m-1\" role=\"group\">\r\n                            <button type=\"button\" className=\"btn btn-info\"\r\n                                    onClick={() => this.update_total()}>Refresh total\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"btn-group m-1\" role=\"group\">\r\n                            <button type=\"button\" className=\"btn btn-outline-danger\"\r\n                                    onClick={() => this.props.remove(this.props.index)}>Remove\r\n                                portfolio\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"btn-group m-1\" role=\"group\">\r\n                            <button type=\"button\" className=\"btn btn-outline-danger\"\r\n                                    onClick={() => this.remove_all_stock()}>Remove all stocks\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n    render() {\r\n        if (this.state.addingStock) {\r\n            return this.render_stock_form()\r\n        } else {\r\n            return this.render_portfolio()\r\n        }\r\n    }\r\n}\r\n\r\nclass Main extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let portfolios_history = [];\r\n        let nb_pf = 0;\r\n\r\n        this.state = {\r\n            portfolios: portfolios_history,\r\n            current_number_of_portfolio: nb_pf,\r\n        };\r\n    }\r\n\r\n    saveMainState() {\r\n        localStorage.setItem(\"portfolios_history\", JSON.stringify(this.state));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState(JSON.parse(localStorage.getItem(\"portfolios_history\")));\r\n\r\n        // add event listener to save state to localStorage\r\n        // when user leaves/refreshes the page\r\n        window.addEventListener(\r\n            \"beforeunload\",\r\n            this.saveMainState.bind(this)\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\r\n            \"beforeunload\",\r\n            this.saveMainState.bind(this)\r\n        );\r\n\r\n        // saves if component has a chance to unmount\r\n        this.saveMainState();\r\n    }\r\n\r\n    addPortfolio = () => {\r\n        if (this.state.current_number_of_portfolio < 10 &&\r\n            this.state.portfolios.includes(document.getElementById(\"pf_name\").value) === false) {\r\n            let newPF = document.getElementById(\"pf_name\").value;\r\n            let tmp_pf = this.state.portfolios;\r\n            tmp_pf.push(newPF);\r\n            let nb_tmp = this.state.current_number_of_portfolio + 1;\r\n\r\n            this.setState({\r\n                portfolios: tmp_pf,\r\n                current_number_of_portfolio: nb_tmp\r\n            });\r\n\r\n        } else if (this.state.portfolios.includes(document.getElementById(\"pf_name\").value) === true) {\r\n            alert(\"This name is already used\");\r\n        } else {\r\n            alert(\"You have too much portfolios\");\r\n        }\r\n    };\r\n\r\n\r\n    removePortfolio = (index) => {\r\n        let tmp_pf = this.state.portfolios;\r\n        localStorage.removeItem(tmp_pf[index]);\r\n        tmp_pf.splice(index, 1);\r\n        let nb_tmp = this.state.current_number_of_portfolio - 1;\r\n\r\n        this.setState({\r\n            portfolios: tmp_pf,\r\n            current_number_of_portfolio: nb_tmp\r\n        });\r\n    };\r\n\r\n    eachPortfolios = (pf, i) => {\r\n        return (<Portfolio name={pf}\r\n                           key={i}\r\n                           index={i}\r\n                           remove={(i) => this.removePortfolio(i)}/>);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row m-2\">\r\n                    <input id=\"pf_name\" type=\"text\"/>\r\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.addPortfolio()}>Create new\r\n                        portfolio\r\n                    </button>\r\n                </div>\r\n                <div className=\"row\">\r\n                    {\r\n                        this.state.portfolios.map(this.eachPortfolios)\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nReactDOM.render(\r\n    <Main/>\r\n    ,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}